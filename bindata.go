// Code generated by go-bindata.
// sources:
// bindata/athletics.bin
// bindata/backhair/feathered.json
// bindata/backhair/long.json
// bindata/backhair/twintails.json
// bindata/backhair/veryshort.json
// bindata/boynames.json
// bindata/building.json
// bindata/enbynames.json
// bindata/face.json
// bindata/firstfloor.bin
// bindata/fronthair/curtains.json
// bindata/fronthair/hairflip-left.json
// bindata/fronthair/hairflip-right.json
// bindata/girlnames.json
// bindata/groundfloor.bin
// bindata/hairacc/ahoge.json
// bindata/roof.bin
// bindata/surnames.json
// bindata/topical/moleright.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAthleticsBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xdd\xbf\x6e\x23\x55\x14\x80\x71\x5f\xb2\x09\x05\x0c\x5b\x53\xbb\x04\x85\x9e\x07\x88\x68\x52\x81\x44\xb1\x50\xac\x44\xc4\x46\x02\x69\xa5\xdd\x8a\x6a\x59\xa8\x79\x89\x68\x3b\x44\x4d\xc9\x23\xf0\x00\xd0\xf3\x12\x6b\x63\x6f\xec\x64\x3c\x76\xc6\x33\x73\xce\xb9\xe7\xcc\x9d\x0f\x7d\x98\x58\x51\xcc\x9d\x7b\x7f\xbe\xf1\xbf\xd8\x9f\x2f\x7f\x3e\x49\xe9\xe4\xf2\xe9\xf3\xb4\x7c\x3d\x4b\x8f\xd2\xe9\x57\xd7\x3f\x5c\xbd\x48\xcb\x5f\x57\x67\xbe\xbc\xfe\xe9\x2a\x3d\x9a\xa5\xd3\xaf\xaf\xbf\x7b\xf9\x6c\xfd\xd5\xd9\x17\x57\xd7\xdf\x3f\x7b\xb9\xfa\x72\x36\xfb\x78\xf9\xcb\x7b\x29\x7d\xf0\xe4\xdb\x1f\x9f\x3e\x7f\x71\xbe\xfe\xb1\x77\x3f\x75\x36\x9b\xbd\x4d\xaf\x7e\x5b\xbe\x4e\x8b\x57\xff\x2d\x4e\xe7\x44\xe1\xaa\x7e\x27\x8a\x12\x26\x29\x5a\x98\xa4\x68\x45\x37\x79\x4e\xf6\xb9\xaf\x72\x58\x93\xee\x4b\x43\xf5\xa6\x6c\xd2\x7d\xf2\xa9\xbd\xe9\x98\x74\x9f\x6a\xea\x55\xd9\x26\xdd\xa7\x97\x24\x15\x66\xd2\x7d\x3e\x49\xab\x02\x4c\xba\xcf\x21\x59\x34\x52\x93\xee\xf3\x46\xd6\x8d\xcb\x64\xbc\xe3\x25\xfd\x35\xd2\x5e\x26\x2b\x93\xde\xc7\x45\xa2\x5c\x97\xcf\xc4\x24\x14\xcb\xc8\x89\xa5\xbe\x49\x28\x96\x57\x5e\x96\xca\x26\xd1\x58\x70\xb9\x58\x6a\x9a\x44\xe3\x14\xb2\x67\xa9\x66\x12\x8d\x93\xca\x92\xa5\x8e\x49\x40\x4e\x30\xb3\x0d\x53\xc1\x24\x20\x27\x9b\x0d\x4b\x5b\x93\xee\x93\x46\xd6\x05\x34\x09\x48\x0a\x65\x12\x90\x74\x9b\xea\x6e\x39\xdc\x24\x20\xa9\x5e\x64\x93\xee\x93\x43\x2e\xe9\x6d\x95\x03\x4d\x02\x92\xf6\xc3\x24\x05\x4c\x83\xe5\x10\x93\x80\xa4\x96\x30\x49\x01\x93\xb1\xec\x6d\x12\x90\xd4\x25\x01\x4b\x4c\x92\x49\xd9\x4c\x02\x92\xba\x37\x94\x25\x26\xc9\xaa\x0c\x26\x01\x49\x7d\xc3\x24\x45\x0b\x93\x14\x2d\x53\x93\x80\xa4\x61\xf5\x97\x83\x49\xb2\x0d\x93\x14\x2d\x4c\x52\xb4\xfa\x3f\x22\x84\x49\x32\x0f\x93\x14\x2d\x0b\x93\x80\x24\x49\x98\xa4\x68\x61\x92\xa2\x85\x49\x8a\x16\x26\x29\x5a\x98\xa4\x68\x61\x92\xa2\x85\x49\x8a\x16\x26\x29\x5a\x16\x26\xfb\x5f\x2c\xd1\x7d\x98\xa4\x68\x61\x92\xa2\x85\x49\x8a\x56\x4f\x39\x98\x24\xdb\xfa\xcb\xc1\x24\xd9\x86\x49\x8a\x96\x9d\xc9\x87\x2e\xdc\xfd\x90\x29\x72\x0f\x81\x34\x35\x09\x4b\x6a\x69\x90\x19\x4c\x92\x55\x83\x36\xc9\x8a\xf7\xb0\x22\xbb\x30\x49\xa1\x1a\x0a\xb2\xe2\x3d\x51\xc9\x28\x4c\x52\xb4\x04\x4e\xd4\xde\x63\xdf\x7d\x12\x28\x4e\x82\x4d\xb2\xe2\x73\x1f\x48\xbd\x16\x90\x76\x26\x5b\xfe\xbf\xee\x13\x42\xee\xc9\x40\x56\x98\x24\xdd\xc4\x20\x2b\x3e\x03\x94\x14\x13\xff\xd6\xbe\x8d\xcf\x4a\x26\x9d\x94\x40\x56\x7c\xa6\x3c\xa9\xd4\x0e\x32\xa7\xc9\xf6\xc1\xb8\x4f\x14\xe5\x49\x15\x64\x65\x6a\x12\x96\x53\x48\x1b\x64\x25\x37\x79\x74\x54\xee\x93\x46\x76\x19\x80\xac\x54\x4c\x1e\x1d\x9b\xfb\xd4\x91\x45\x36\x20\x2b\x2d\x93\x47\x47\xe8\x3e\x81\xa4\xdb\x51\x90\x11\x4c\x76\x19\xa7\xfb\x4c\x92\xbc\x2e\x1a\x65\x6b\xad\x69\xb2\xcb\x80\xdd\xa7\x94\x24\xd9\x83\xac\xd4\x4d\x76\x1c\xb6\xfb\xdc\x52\xaf\x3a\x52\x54\x5a\x59\x7d\x93\xdd\x0f\xc1\x7d\xaa\xe9\x68\xdd\x35\xea\x2d\xa8\x89\xc9\xbe\xc7\x82\xcf\x80\xf9\xad\xa0\x95\xc9\x61\xc7\x05\x51\xf7\x02\xac\x97\xad\xc9\xc1\xc7\x48\x63\xc9\xc0\x8c\xb9\x49\x64\x16\x9c\x8d\x96\x4c\x26\x61\x59\x58\x96\x54\xf2\x99\x44\x66\x19\xd9\x23\xc9\x6d\x12\x99\x23\x2d\x23\x0f\x1f\x93\xf8\x1c\x4b\x1e\x24\xfc\x4d\x42\x34\x60\xae\x06\xc2\x99\xc4\xe7\x24\x1d\x8e\xc6\x24\x4d\x32\x4c\x52\xb4\x30\x49\xd1\xc2\x24\x45\x0b\x93\x92\x1e\xff\xb1\xc9\x7d\x24\x25\x85\x49\x49\x98\xb4\x08\x93\x92\x30\x69\x11\x26\x25\x61\xd2\x22\x4c\x4a\xc2\xa4\x45\x98\x94\x84\x49\x8b\x30\x29\x09\x93\x16\x61\x52\x12\x26\x2d\xc2\xa4\x24\x4c\x5a\x84\x49\x49\x98\xb4\x08\x93\x92\x30\x69\x91\xa9\xc9\xdb\x0b\x8f\x9c\xf0\x00\x31\x69\x91\xb5\xc9\xbb\x55\xb3\x6c\xbe\xfb\xcf\xe2\xec\x66\x7d\x2a\x1c\x3c\xde\x2c\x2a\xc3\xdb\xe2\xf1\x3f\x8b\x0f\xcf\x57\xa7\xf3\xc5\xfb\xff\x1e\x6c\xbe\xfe\xfe\x36\x2c\x86\xac\x38\x8b\x35\x72\xbb\xfc\xea\xe7\xcf\x6e\xa4\x87\x86\x46\x8b\xf2\x68\xfc\xe8\x5c\xb9\x96\x9d\xf1\xe6\x40\x0d\x8d\xec\x8c\x21\xcb\x67\x71\xa1\x57\x8b\xc5\xed\x0d\xc3\xbf\x3e\x41\x5f\xfc\x8a\xd0\xb7\xb2\x76\x4f\xad\xfe\x75\xa3\xdd\x6f\x21\x32\x64\x45\x88\xbc\xac\xfd\x6e\x3e\x79\x73\x80\xe2\xc9\x9b\xcb\x40\x16\x1b\xf7\xe8\xeb\xf5\x3e\xaf\xf5\x98\x00\xc2\xba\xfe\xc6\xdd\x08\x5b\x9d\xde\xf5\xee\x6c\xac\xfb\x22\x0f\x5c\x11\x0e\x8c\x54\xd2\xde\xee\x8f\xc3\xdc\x0e\xdb\x57\xd7\x7b\xa7\xbb\xbf\xb2\xec\x9d\xaa\x29\x6c\x5e\x10\x06\x63\xed\x85\x18\x0c\x55\xa1\x06\xd9\x07\x31\xe8\x67\xb0\xb1\x09\x6e\xb7\xc2\x86\x41\xad\xc7\xc6\x31\x88\xc1\x8d\xc1\xdd\xa7\x87\xeb\x93\xbf\xba\x6d\x8e\xb7\x40\x95\xe1\x8d\x3d\x0f\x83\x81\x0c\x72\xdb\x0f\x83\x31\x0c\xc6\xbe\x0f\xbc\x7e\x82\xf0\xf2\xd0\xad\x04\xcc\x8d\xd8\x5c\xf0\x7d\x6f\x67\x2c\xe9\x66\x13\xbb\x5e\x41\x02\x83\x3f\x0b\xb2\x1e\x40\xd3\x4b\xf5\xcd\x61\x3c\xc3\x15\x6e\xb6\x55\x77\x63\x45\xdb\xbb\x38\xbe\xfb\x5d\xc4\xdd\xfd\x56\xff\x39\x7d\xa2\xec\x4e\xe1\xda\x85\xc2\x9e\x0a\xbd\x5f\xfb\x32\xa8\x79\x63\xb7\x5a\xbf\x58\x0c\x85\x23\x56\x98\xf3\xf5\x7f\xc3\x6a\x5c\x35\xda\xcf\xa2\x6f\xac\xfa\x32\xbf\x12\x9a\xdd\x6f\x34\xfe\x32\xbd\x12\xff\x81\x65\x89\x75\x2f\xa4\x71\x6d\xd8\xde\x10\xdc\x1b\x27\x0e\x75\x1d\x1a\x37\xb6\xbf\x95\x6b\xde\x17\xde\xde\x11\xd6\x74\x18\xf8\x5e\x70\xa9\x0a\xe3\xfd\x85\x70\x86\x47\xfe\xd8\xef\x9a\x17\x1e\x39\x5f\x8d\xeb\x5b\x7c\x17\xca\xcf\x7d\xe0\x6f\x42\x49\x77\xc3\x0c\xcf\xff\xe2\x71\x42\xe1\x51\x3b\x3c\x4a\x1a\x81\xc7\x51\x2d\x2e\x1a\x25\x8d\x40\x23\xbb\xe3\x84\xc2\xa3\x76\x78\x94\x84\x47\xed\xf0\x28\x09\x8f\xda\xe1\x51\x92\x8e\xc7\xfd\xf0\x48\x43\x92\x3e\xfa\xad\xf7\x5e\x33\xfe\x73\xd1\x3d\xcc\x49\x12\x3e\xd3\x4c\x07\xc3\xa4\x24\x4c\x5a\x84\x49\x49\x98\xb4\x08\x93\x92\x30\x69\x11\x26\x25\x61\xd2\x22\x4c\x4a\xc2\xa4\x45\xee\xaf\x35\x1c\x75\xd5\x67\x9b\xdc\x47\x52\x56\xe9\x6d\x4a\x7f\xa7\x45\xfa\x73\xf5\xef\xa7\xb3\xff\x03\x00\x00\xff\xff\x2a\x25\xed\xb2\xe7\x80\x01\x00")

func bindataAthleticsBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataAthleticsBin,
		"bindata/athletics.bin",
	)
}

func bindataAthleticsBin() (*asset, error) {
	bytes, err := bindataAthleticsBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/athletics.bin", size: 98535, mode: os.FileMode(436), modTime: time.Unix(1526583562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataBackhairFeatheredJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\x72\x4b\x4d\x2c\xc9\x48\x2d\x4a\x4d\x51\xd2\x51\xf2\x74\x01\x0a\xa4\xa4\xa6\x25\x96\xe6\x94\xe8\xa6\x21\x49\x04\x64\x26\x2b\x59\x55\x2b\xb9\x24\x96\x24\x2a\x59\x45\x47\xc7\xea\x44\x57\x2b\x39\x03\xd5\x2a\x00\xe5\x9c\xd2\x95\xac\x0c\x74\x94\xdc\x40\x54\xad\x0e\x79\xe2\xf1\xa8\xe2\x86\xf4\x12\xa7\xd8\xfd\x64\x87\x84\x3e\xad\x5c\x44\xa6\x78\x4c\x0c\xa5\x0e\x22\x18\x14\xb8\xbc\x5c\x33\xc8\x82\x02\x97\x7b\x88\x0f\xa2\xd1\xa0\xa0\x3c\x28\x06\xca\xcb\xb4\xcb\x38\x64\x97\x15\x61\x83\x2c\x88\x28\x76\x0f\xd5\xeb\x8f\x21\x2b\x3e\x1a\x12\xf0\x90\x88\xad\xad\xe5\x02\x04\x00\x00\xff\xff\x1a\x57\xc1\xcd\x96\x08\x00\x00")

func bindataBackhairFeatheredJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBackhairFeatheredJson,
		"bindata/backhair/feathered.json",
	)
}

func bindataBackhairFeatheredJson() (*asset, error) {
	bytes, err := bindataBackhairFeatheredJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/backhair/feathered.json", size: 2198, mode: os.FileMode(436), modTime: time.Unix(1526768769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataBackhairLongJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\xf2\xc9\xcf\x4b\x57\xd2\x51\xf2\x74\x01\xb2\x53\x52\xd3\x12\x4b\x73\x4a\x74\x73\x20\x62\x01\x99\xc9\x4a\x56\xd5\x4a\x2e\x89\x25\x89\x4a\x56\xd1\xd1\xb1\x3a\xd1\xd5\x4a\xce\x40\x65\x0a\x40\x39\xb7\x74\x25\x2b\x03\x1d\x25\x27\x10\x55\xab\x43\x9e\x78\x3c\x54\xdc\x90\x5e\xe2\x64\xfb\x40\x1f\x87\x0d\xd4\x0a\x09\x52\xc5\x63\x62\x48\xf6\xda\x60\xf3\x02\x1d\xbc\x5c\x33\xc4\xbd\x8c\xe1\x7e\xb2\x7d\x0c\x0f\xbc\xc1\xe2\x35\x7d\x9a\x7b\x19\x4d\xbd\x21\xc1\xa0\x88\xa7\x92\x38\x2e\xaf\xe1\x72\x10\xf5\xbc\x1c\x8f\xc3\x06\x5c\xe2\xd4\x2e\xc7\x89\xb5\x97\x66\x91\x3c\x68\xc5\x31\x7d\x1c\x5b\x5b\xcb\x05\x08\x00\x00\xff\xff\x7f\x38\x92\xd3\x84\x07\x00\x00")

func bindataBackhairLongJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBackhairLongJson,
		"bindata/backhair/long.json",
	)
}

func bindataBackhairLongJson() (*asset, error) {
	bytes, err := bindataBackhairLongJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/backhair/long.json", size: 1924, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataBackhairTwintailsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\x0a\x29\xcf\xcc\x2b\x49\xcc\xcc\x29\x56\xd2\x51\xf2\x74\x01\x0a\xa4\xa4\xa6\x25\x96\xe6\x94\xe8\x96\x20\x49\x04\x64\x26\x2b\x59\x55\x2b\xb9\x24\x96\x24\x2a\x59\x45\x47\xc7\xea\x44\x57\x2b\x39\x03\xd5\xea\x03\xe5\xdc\xd2\x95\xac\x0c\x75\x94\x9c\x80\x94\x41\xad\x0e\x44\x3c\x26\x06\x87\x84\x1e\x0e\xf1\xf8\x01\x12\xc7\xe5\x1e\xe2\x3d\x06\x0f\x8b\x1a\x1c\x5a\xf2\x49\xb4\x42\x01\x2a\x6e\x40\x67\x71\x9c\x71\x86\xcb\x03\x18\x1e\x26\x18\x14\x68\x56\x1b\x0e\xb4\x97\x29\x14\x37\x1c\x0d\x09\xe2\x43\x02\x67\xf2\x1a\xae\x41\x81\x91\xbf\xe1\x41\x81\xcb\xa4\xb2\x41\x56\x22\x90\x2a\x8e\xe1\xfe\xd8\xd8\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x6d\xbf\xa9\x4c\x6a\x06\x00\x00")

func bindataBackhairTwintailsJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBackhairTwintailsJson,
		"bindata/backhair/twintails.json",
	)
}

func bindataBackhairTwintailsJson() (*asset, error) {
	bytes, err := bindataBackhairTwintailsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/backhair/twintails.json", size: 1642, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataBackhairVeryshortJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\x0a\x4b\x2d\xaa\x54\x08\xce\xc8\x2f\x2a\x51\xd2\x51\xf2\x74\x01\x8a\xa4\xa4\xa6\x25\x96\xe6\x94\xe8\x96\x01\x65\x74\x8b\xa1\x32\x01\x99\xc9\x4a\x56\xd5\x4a\x2e\x89\x25\x89\x4a\x56\xd1\xd1\xb1\x3a\xd1\xd5\x4a\xce\x40\xc5\x0a\x40\x39\xa7\x74\x25\x2b\x03\x1d\x25\x37\x10\x55\xab\x43\x9e\x78\x3c\xaa\xb8\x21\xbd\xc4\x29\x76\x3f\xd9\x21\xa1\x4f\x2b\x17\x91\x29\x1e\x13\x43\xa9\x83\xc8\x0e\x8a\x9a\x41\x16\x14\x14\xbb\x67\x34\x24\x28\x0e\x89\x61\x27\x3e\x1a\x12\xa3\x21\x31\x1a\x12\x38\x43\x22\xb6\xb6\x96\x0b\x10\x00\x00\xff\xff\x50\x47\xb0\x43\x95\x08\x00\x00")

func bindataBackhairVeryshortJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBackhairVeryshortJson,
		"bindata/backhair/veryshort.json",
	)
}

func bindataBackhairVeryshortJson() (*asset, error) {
	bytes, err := bindataBackhairVeryshortJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/backhair/veryshort.json", size: 2197, mode: os.FileMode(436), modTime: time.Unix(1526768780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataBoynamesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x53\x4d\x6f\xa4\x30\x0c\xbd\xef\xcf\x98\xf3\xfe\x89\x95\x56\xea\x30\x88\xa9\x04\x5c\x50\xd5\x83\xe9\x44\x22\x8d\xc0\x52\x42\x0e\xf4\xd7\x37\xf1\xb3\x99\xb9\xe4\x3d\x7f\x60\x3f\x9b\xe4\xe3\xf2\x2f\x78\xbe\xfc\xad\x10\xa9\x22\xfb\x7a\x46\xda\xc5\x3a\xf2\x9a\x0b\xfe\x27\xff\xb5\x78\x90\xa0\x98\x72\x70\x85\xbd\x71\x64\x85\x9a\x79\xa5\x92\x28\x1e\x65\x70\x46\x03\xf9\xba\x92\x1d\x39\x07\xed\xce\x88\x78\xfc\x8c\x0e\x57\xff\x70\x74\xb2\x93\x1c\x9c\x16\xf0\xa0\x45\xfd\x06\xad\xd7\x32\x40\x80\x27\x9e\x49\x91\x51\x95\x77\x0a\x35\xa9\x31\x75\xcd\x29\xae\x49\x24\x33\x36\x7b\x82\xba\x1b\x32\x6e\x1a\xbf\x65\x98\x19\x66\x4b\xee\xe1\x04\xbd\x94\x6e\x89\x23\xfc\x3b\xa1\x6b\x61\x29\x1b\xb2\x91\xf8\xc2\x10\xfd\x41\xbb\x4a\x24\xe6\xb6\xd7\xf3\xdb\x03\x4b\x4d\xf5\xc8\x94\xad\xb7\x09\x94\x49\x2d\x6f\x6b\x69\x79\xc1\x12\x5a\xd6\xea\x9c\xf1\x9d\x0a\xb0\xee\x07\xe3\xac\x46\x47\x01\x6b\xea\x28\x61\xa9\x9d\xfe\xee\xce\x6f\x98\xee\x4e\x2c\xe5\xee\x3c\xab\x83\x67\x83\xd3\x3e\xb2\xe6\xc4\x0a\xef\xba\xd7\x5e\x26\xea\xbd\xc8\xaa\x20\xad\x7a\x0e\x50\x04\x22\x31\xd1\x54\x4e\x6d\x5e\x98\x48\xef\x0f\x0b\xe7\x67\x24\x6b\x28\x67\x85\x8d\xf5\x42\x0e\x34\xa3\x32\x48\x8d\x0f\xcb\xb9\x35\xa3\xea\xde\x14\x30\xcd\xf0\x4c\xb2\x0c\x98\x66\xa0\xeb\xc0\x11\xa0\x66\x4e\x78\x25\xa3\xbd\x92\x51\x5f\xc9\x58\x2e\x9d\x96\xac\x34\x69\x30\xb8\xc5\x07\x75\xba\xd3\x99\x57\x32\x02\x8f\x7e\x07\x25\x63\xca\x73\xf9\x3b\x85\x4d\xb4\xe2\xa9\x4c\x24\xd7\x6c\xc2\xba\x27\xbd\x01\x82\xf2\xa9\x32\xe4\x40\xea\x24\xeb\x2a\xe7\x83\x3c\x48\x50\x5c\x35\x6c\x69\xa5\xc3\xe7\x9f\xdf\x00\x00\x00\xff\xff\x7e\xe7\x93\xb4\x1e\x04\x00\x00")

func bindataBoynamesJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBoynamesJson,
		"bindata/boynames.json",
	)
}

func bindataBoynamesJson() (*asset, error) {
	bytes, err := bindataBoynamesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/boynames.json", size: 1054, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataBuildingJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xd9\xc1\x0a\xc2\x30\x0c\x06\xe0\xbb\x4f\x21\xf1\xa2\x58\xc4\x8b\x08\x05\x2f\x2a\xbe\xc4\x18\xba\x93\x2f\xe0\x6d\xee\xdd\x45\x18\x28\x83\x4e\x5b\xc2\xe8\x9f\xfe\x47\x3f\x82\x86\x26\x8b\xa9\xb6\x72\x6e\x1e\x8d\xf8\xaa\x6a\xe5\x78\x17\xbf\x75\x72\x12\x2f\x73\x71\x72\x79\xbf\xec\x1c\x1d\xd8\x37\x01\xbf\x82\xf8\x27\xff\xda\xb1\x43\x2d\xfa\x33\xb3\x7c\xd2\xf3\x1f\x76\x28\xfa\xb3\x47\xd7\xed\xd0\x65\xef\xfb\x81\xdf\x02\xbe\x0a\xb8\xd6\x13\x96\xdb\x39\xd3\x53\xbf\x0b\x59\x61\x1b\x8e\x5e\x47\xf4\xfc\xe9\xbf\x76\x1a\xf4\x6d\x8d\x3e\x5e\xc7\x45\xef\xbb\x3f\x5d\x2b\x9f\xd8\xcf\x65\x1f\xda\x70\xbd\x49\x13\xdb\xa1\x8c\x9f\x26\xde\xea\xa4\x41\x39\x7f\xc6\xa7\x4e\x9a\x03\x1d\xca\xd1\xeb\x88\x9e\x3f\x5d\x7b\xa7\xa1\xe7\xe9\x5a\x3b\xcd\x3a\xf0\x3e\xb1\xce\xdb\x53\x99\xce\xdb\x93\xf5\x78\xab\x93\x06\xe5\xfc\x19\x9f\x3a\x69\x72\xfb\x4d\x9b\x3e\xee\x5a\x75\xd4\x9a\x34\xfc\xef\xa9\x4c\xff\x9a\x34\x75\x37\x7b\x05\x00\x00\xff\xff\x7b\x24\x1d\x4c\x9f\x28\x00\x00")

func bindataBuildingJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataBuildingJson,
		"bindata/building.json",
	)
}

func bindataBuildingJson() (*asset, error) {
	bytes, err := bindataBuildingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/building.json", size: 10399, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataEnbynamesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x55\x4d\x8f\xdb\x38\x0c\xbd\xef\xcf\x98\xf3\xfe\x89\xc5\x76\xd0\x49\x0c\xa7\x80\x9d\xa2\x30\x8a\x1e\x98\x46\x68\x34\x82\x4d\x40\xb6\x0e\xce\xaf\xaf\xf4\x1e\xe9\x99\x0b\xdf\x13\xbf\x44\x51\xb4\xfc\xf3\xe5\xbf\xf8\xf2\x6f\x15\x49\x01\x33\x57\x8b\x00\x32\x56\x49\x96\x00\x0c\xb4\x26\x93\x0c\x49\xd1\x20\x23\x86\x2e\x0a\x99\x65\x83\x6e\x2d\x09\xb8\x55\x02\xe7\x5d\x28\x93\xa3\x69\xe7\x40\x5c\x1c\xa9\x2f\x73\xa9\xf8\xff\x23\xc2\x1f\x88\x88\xca\x16\xa9\x49\x49\x77\x75\x34\xa3\xc9\x62\x00\xed\x17\x89\xbf\x1f\x91\x24\x19\xd6\xaa\xda\x7e\xaf\x28\xfd\xd5\x8b\xfc\xaa\xd9\xa1\x65\x78\x93\x1a\x07\x8d\x31\x2a\xd1\xa8\x06\x89\xa6\x5c\x0c\x92\x38\x89\x4e\xdc\x63\x71\xd3\x46\xcd\x2e\x5b\x70\x02\x4d\xbc\xb1\xb6\xb7\x78\x0f\x72\xb0\x83\xec\xba\x3e\xc8\x93\xe4\x83\x60\x63\x5e\x5c\x83\x8d\x24\x4b\xa2\x21\xb3\x2b\x8d\x78\x74\x56\xdb\x6e\x53\x1c\xfd\x4d\x17\x65\xd9\xee\xd2\x90\x61\xba\x89\x99\x36\x6e\x75\xf2\x76\x9c\x8e\x6e\x9c\x56\xc1\x45\x9d\x5a\x0b\x5b\xfc\xe9\x59\x90\xf8\x4c\xcf\xb3\xf9\x9d\xcb\x82\xa4\xe7\x92\x1d\x9a\xba\x93\x70\x0f\xc0\x88\xba\xba\x7a\xfd\x0b\x50\x71\xca\x86\xf4\x5b\x99\xb6\xab\x87\x64\xa1\x9d\x4d\x01\x50\x9d\xe4\x4f\x8c\xd6\x27\xeb\x02\x51\x23\xc0\xc0\x63\x76\x61\xa1\x7c\x8f\xc4\x9a\xde\x34\xe8\x67\x17\xfd\xd4\xc6\x90\x36\x26\xc2\x6c\x49\x7c\x02\x1b\xb1\xfa\xf4\xc1\x7b\xe8\xaa\x85\xf1\xb5\xf7\x98\xf2\x4e\xad\x26\x2d\xdc\xa2\x78\x1a\xab\xdf\x8b\xc7\x78\x57\xd9\x16\xbd\x44\xc8\xc4\x1b\xec\x65\xe6\x7a\x71\x42\x6d\x66\xa6\x5e\x56\xd7\xaf\xbc\xbc\x4a\xca\x4e\xd3\x8e\x75\xf8\xc3\x96\xf6\x01\xd2\xbe\x11\x20\x53\xc4\x3b\x2f\xa1\xe7\x64\xf6\x3c\x73\x1f\x6d\xf0\x2b\xe1\xe5\xf4\x91\xcb\x55\xcc\xcf\x3f\xa7\x3e\xd2\xbc\x7b\x00\x37\x8e\x76\x25\xbd\x06\xc8\x99\x13\x08\x02\x3f\xb5\x43\x5c\xf8\xa9\x5d\xfc\x8c\x17\xd1\xe4\x48\xbb\x9a\xde\xa7\x8f\x4c\x9d\xd1\xaa\x48\xa2\x37\x56\x5b\x89\xc3\xb1\xde\x2d\x9a\xe7\xbd\xf8\xfe\xdf\x6c\xb8\x07\x69\x03\x31\xa0\x4f\x03\xc6\x65\xa0\xc3\xc0\x96\x34\xd8\xb8\xa6\x11\x65\x0f\x68\xcb\xa0\x89\x97\x4a\x02\x77\x5c\x43\x95\xd6\xf2\xca\x30\x06\xc3\xee\xe6\xf2\x61\x29\x66\x2a\xc5\x60\x51\x7b\xbb\x46\xb9\x31\x33\x49\x01\xf3\xcb\x1b\x79\x17\x15\x0a\xde\x68\x12\x33\xd9\xb7\x3f\xd6\x41\xc0\x81\xc7\xe0\x5d\x1b\x1f\xc7\xb4\x3b\x2d\xe4\x8b\xc1\xbb\xaf\xd9\xc6\xca\xd8\xb4\xf1\x23\xec\x88\x79\xf2\x45\x1c\x1f\x34\x98\xda\x8e\x34\x3e\x0a\x72\x2a\xeb\x73\xad\x7f\x0a\x63\x59\xf9\x0b\x18\xcb\xd3\x01\xbf\x8a\xab\xbf\xe6\x57\x7b\xcd\xaf\xf5\x95\xb2\xcd\x1b\x4d\x4e\x90\xb7\x91\xd5\xdc\x53\xb0\xe6\x34\x7a\x28\xcb\x2c\x4e\xa8\x99\xdd\x29\x3b\xb4\xfd\xaf\xea\x7a\x1f\xd3\x46\x18\xb2\x96\x1b\xdb\x0d\xc6\x2a\x1b\x5b\x85\xcc\x7e\x9b\xdf\x61\xa9\x12\xab\x1f\xb5\x32\xcc\xc9\x24\x33\xff\x01\x93\xe0\x41\x9b\x98\x7e\x62\x5f\x27\x7b\x4e\xa6\xe3\x5d\x06\xcb\x9f\x18\x83\x8a\x19\xd9\xc7\xa9\x50\x46\x4a\x6e\xc4\x29\x9f\xbc\x9e\xc9\x42\x78\xf0\xc9\x3b\x3f\x71\x28\x26\x4c\x5c\x95\x77\xb1\x65\x12\x43\x5f\xd3\x9b\x0d\xac\x68\x9b\x78\x01\xfc\x24\xa6\x82\xaf\xfd\xd7\x3f\x7f\x03\x00\x00\xff\xff\xb4\x4d\xc7\x73\x76\x08\x00\x00")

func bindataEnbynamesJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataEnbynamesJson,
		"bindata/enbynames.json",
	)
}

func bindataEnbynamesJson() (*asset, error) {
	bytes, err := bindataEnbynamesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/enbynames.json", size: 2166, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataFaceJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\x72\x49\x2c\x49\x54\xb2\x8a\x8e\xae\x56\x72\x56\xb2\x52\x52\x50\xd2\x51\x72\x4b\x57\xb2\x32\xd0\x51\x72\x02\x51\xb5\x3a\x23\x4c\x3c\x56\x87\xca\x21\x11\x3f\x40\xe2\x03\x17\x12\xfa\x54\x0a\x21\x6a\xa9\x8f\x89\x19\xb0\xa0\xa8\x21\x51\x7d\x1c\x89\xea\xb5\x68\xec\x9e\x81\x0b\x09\x5a\x8b\x0f\x5c\x48\x50\x9e\x1c\xa1\xe2\x65\x54\x32\x87\xd4\xfc\x4a\xfb\x32\x13\x67\x10\x51\xab\x70\xa4\xd8\xcb\x54\x0f\x0a\x52\x7d\x40\x6a\xfa\xc5\xa5\x9e\x66\xd5\x0a\xc1\x90\xa0\x75\x89\x40\xad\xec\x41\xb1\xfb\x63\x63\x6b\xb9\x00\x01\x00\x00\xff\xff\xb4\x1d\x9f\x13\x68\x09\x00\x00")

func bindataFaceJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFaceJson,
		"bindata/face.json",
	)
}

func bindataFaceJson() (*asset, error) {
	bytes, err := bindataFaceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/face.json", size: 2408, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataFirstfloorBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xcd\x6e\xd4\x30\x10\xce\xb0\x7f\x12\x6c\x8b\x38\x72\x41\x88\x70\xab\xb4\x0f\x50\x01\x47\xc4\xa5\x27\x90\x38\xb4\x1c\x2a\xb1\xa2\x2b\x81\x54\xa9\x3d\xd1\x13\x0b\x6f\x12\xf1\x02\x7d\x82\xbe\x08\x6f\x82\x92\xda\xeb\x6c\x62\x27\x63\x7b\x6c\xaf\xb3\xe9\x6a\x57\x9f\xd2\x89\x3d\x1e\x8f\x3f\x4f\x26\x93\x34\xc7\xc5\xaf\x01\xc0\xe0\xe4\xfc\x12\x8a\x65\x02\x43\x18\x7d\x5a\x7c\x9f\x5f\x41\xf1\x87\x9d\x7c\x5c\xfc\x9c\xc3\x30\x81\xd1\xe7\xc5\xd7\xeb\x0b\x2e\x8d\x3f\xcc\x17\xdf\x2e\xae\x99\x98\x24\xcf\x8b\xdf\x8f\x00\x9e\x9c\x7e\xf9\x71\x7e\x79\x35\xe3\xc3\x56\xa3\xc6\x49\x92\xbf\x5e\x16\x4b\xc8\x9f\x3e\x4b\x35\xbf\x97\x31\x7e\xc2\x74\x3e\xce\x04\x14\xb1\xfa\xe5\x90\xe5\xd3\x19\xc7\xc1\x59\x29\x4c\x67\x69\x25\x69\x71\x77\xc4\x8f\x83\xbf\x91\x5c\x67\x96\xeb\x59\x8c\x90\x7c\xad\x56\x00\xd9\x6a\xad\x55\xc7\xe8\xb4\xe9\xb8\x01\x6c\x4d\x0a\x6d\x98\x64\xeb\x6f\xd2\xec\xab\xe0\x36\x2b\x57\x10\xbc\x59\x37\xae\xcd\x8b\xb0\x62\x1d\xa2\xa3\xcc\x1e\x31\xf8\x9e\x91\xb4\x27\x19\x0a\x93\x19\xaf\x41\xe1\x9e\x3a\xd1\x2f\x63\x2c\x1c\x63\x3b\x22\xc3\x6e\x52\xa1\x9e\x8d\x60\xd7\x80\xf1\xe8\xad\x4d\xe7\x85\x32\x28\x82\xa7\x24\x9e\x10\x7e\x45\xd4\x33\x3b\x32\x7a\x4b\xbc\x1a\x40\xef\xd6\xb0\x85\x57\x2f\xc8\x6f\x71\x5c\x27\x1d\xaf\xb8\x17\xd3\x53\x5d\x74\xd3\xd6\xcc\x7b\x62\x20\xff\xbd\x9e\xfa\x98\x9e\xfa\xc5\xfd\x3a\xe1\x3c\x94\xb8\x4f\x0d\xc4\xf7\x39\xe1\x20\xfc\x06\x44\xfc\x96\x89\x27\xf7\xf5\x80\x78\x2c\xe2\x43\x72\x3d\x68\x8a\x23\x7c\xf9\x6e\xda\x93\x7f\x28\x2c\xf5\x8d\x6e\x50\x4c\x4f\xbd\xf3\xbc\x77\x75\x93\xf2\x7b\xda\xdd\x91\xfa\xbc\x84\xb5\xb5\xba\xed\x1a\x78\x5b\xf7\x95\x44\x89\xc6\xa9\x15\xae\xfa\x44\x83\x31\x6c\x7a\xeb\xfb\x45\x9b\x6f\x8e\xdd\xc3\x0f\x1b\xaf\x32\xf6\x08\xda\x88\xcd\x55\x1d\x7b\x04\x6d\x44\x68\x15\xd2\xe5\xbd\xa1\xad\x1f\xb0\xfa\x12\x55\x4e\x16\xc2\x56\xee\x19\xa6\xaa\x04\xad\x09\xc8\x15\x47\xb3\x05\xaf\x3b\xd0\x71\xfa\x09\xd0\x4e\x17\xf6\x3b\xd6\x56\x9b\x6e\x6f\xf8\xf1\x30\xad\x65\x5d\xfb\x61\xba\x1e\xdf\x2a\x41\x7b\xb4\xde\xd4\xfa\x3c\x52\x5e\xd7\x4d\xe3\x5d\x3c\xa1\xa5\x32\x8f\x08\xdd\x66\xb9\xa6\x1e\x79\xfb\x40\x5d\x6f\x44\x76\xfa\x44\xfd\xc1\x99\x42\x3d\x64\x58\xd4\xb7\xe5\xc9\x7f\x7e\x2a\x20\xcb\xb7\x37\x3b\x42\xbd\xe2\xb8\x03\x99\x0e\xda\x0d\xc7\x39\xf5\x12\x8f\x4d\x8a\x49\x19\xc0\x9f\xfa\x00\xed\xdd\x8b\x7a\x1d\x76\x3e\xea\xb7\x93\xeb\x27\x84\x37\x35\x0f\x37\xd7\x53\x02\xab\x0e\xc3\x98\xef\xb8\x90\x26\xb9\xa8\x54\xd7\xa9\xd0\xdd\xbe\x15\xaf\x5a\x50\xea\xdd\xd6\x1b\x91\x1d\xf5\x7f\xcf\xf8\x1f\x9a\x12\x51\x27\x2d\x2d\x52\x48\x35\xa4\x12\xd9\xd4\x86\x9c\xa3\x28\x05\x7e\xd1\x50\x2d\x77\xf8\xd6\x61\x53\xd9\x36\x6d\xf4\xfb\x0a\x77\x77\x5d\x77\xa7\x6b\x77\xa7\x6f\xec\x2c\xa2\xcf\x26\xe2\x0a\xed\xd8\xdd\xfa\xa3\x0d\xc2\x17\x1e\xab\x0e\xcf\x99\x20\x7f\xf1\x0a\x72\x78\x0c\xc7\xc9\x7d\x00\x00\x00\xff\xff\x2f\xcb\x23\x4a\xda\x24\x00\x00")

func bindataFirstfloorBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataFirstfloorBin,
		"bindata/firstfloor.bin",
	)
}

func bindataFirstfloorBin() (*asset, error) {
	bytes, err := bindataFirstfloorBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/firstfloor.bin", size: 9434, mode: os.FileMode(436), modTime: time.Unix(1526583495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataFronthairCurtainsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\x72\x2e\x2d\x2a\x49\xcc\xcc\x2b\x56\xd2\x51\xf2\x74\x01\xf2\x53\x52\xd3\x12\x4b\x73\x4a\x74\x93\x11\xe2\x01\x99\xc9\x4a\x56\xd5\x4a\x2e\x89\x25\x89\x4a\x56\xd1\xd1\xb1\x3a\xd1\xd5\x4a\xce\x40\xa5\x0a\x40\x39\xa7\x74\x25\x2b\x03\x1d\x25\x37\x10\x55\xab\x83\x5f\x3c\x0e\x55\xdc\x10\x26\x1e\x3f\x40\xe2\xb8\xdc\x43\xb4\xbf\x08\x86\x84\x3e\x0e\x1b\x70\x89\xe3\x72\x29\x2e\xf5\xb8\xec\x8d\x89\x21\xd1\x02\x9c\x1a\x70\x4a\x90\x1e\x18\x65\x94\x06\xf7\x00\x8b\x13\xed\x7e\xb2\x33\xc8\xb0\x13\x1f\x0d\x89\xd1\x90\x18\x0d\x89\xd1\x90\x20\x18\x12\xb1\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x4c\x3e\xb5\x3c\x93\x08\x00\x00")

func bindataFronthairCurtainsJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFronthairCurtainsJson,
		"bindata/fronthair/curtains.json",
	)
}

func bindataFronthairCurtainsJson() (*asset, error) {
	bytes, err := bindataFronthairCurtainsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/fronthair/curtains.json", size: 2195, mode: os.FileMode(436), modTime: time.Unix(1526768802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataFronthairHairflipLeftJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\x72\x4a\xcc\x4b\x2f\x56\x48\xcb\xc9\x2c\x28\x48\x4d\x51\xc8\x49\x4d\x2b\x51\xd2\x51\xf2\x74\x01\xca\xa4\xa4\xa6\x25\x96\xe6\x94\xe8\x66\x24\x66\x16\x81\xe4\x75\xa1\x92\x01\x99\xc9\x4a\x56\xd5\x4a\x2e\x89\x25\x89\x4a\x56\xd1\xd1\xb1\x3a\xd1\xd5\x4a\xce\x40\xf5\x0a\x40\x39\xb7\x74\x25\x2b\x03\x1d\x25\x27\x10\x55\xab\x43\x9e\x78\x3c\x54\xdc\x90\x5e\xe2\x64\xfb\x40\x1f\x87\x0d\xb8\xc4\x6d\x71\x88\x97\x91\xa8\x3e\x26\x86\x68\x09\x82\x7e\x23\xd5\x0f\xd4\x8a\x65\x52\xc5\x6b\x48\xf6\x19\xae\x50\xc5\x30\x69\xd0\xf9\x2c\xb6\xb6\x96\x0b\x10\x00\x00\xff\xff\x3d\xc4\x9d\x98\xa1\x03\x00\x00")

func bindataFronthairHairflipLeftJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFronthairHairflipLeftJson,
		"bindata/fronthair/hairflip-left.json",
	)
}

func bindataFronthairHairflipLeftJson() (*asset, error) {
	bytes, err := bindataFronthairHairflipLeftJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/fronthair/hairflip-left.json", size: 929, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataFronthairHairflipRightJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\x72\x4a\xcc\x4b\x2f\x56\x48\xcb\xc9\x2c\x28\x48\x4d\x51\x28\xca\x4c\xcf\x28\x51\xd2\x51\xf2\x74\x01\x4a\xa5\xa4\xa6\x25\x96\xe6\x94\xe8\x66\x24\x66\x16\x81\x14\xe8\xc2\x64\x03\x32\x93\x95\xac\xaa\x95\x5c\x12\x4b\x12\x95\xac\xa2\xa3\x63\x75\xa2\xab\x95\x9c\x81\x1a\x14\x80\x72\x6e\xe9\x4a\x56\x06\x3a\x4a\x4e\x20\xaa\x56\x87\x3c\xf1\x78\xa8\xb8\x21\xbd\xc4\xc9\xf6\x81\x3e\x0e\x1b\x70\x89\xdb\xe2\x10\x2f\x23\x51\x7d\x4c\x0c\xd1\x12\x64\xfb\xad\x06\x87\x15\xd4\x8a\x65\x52\xc5\x47\xa2\x9f\x71\xb9\x07\x23\xbd\xc4\xc6\xd6\xd6\x72\x01\x02\x00\x00\xff\xff\x89\xdf\x04\xf6\xd5\x03\x00\x00")

func bindataFronthairHairflipRightJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataFronthairHairflipRightJson,
		"bindata/fronthair/hairflip-right.json",
	)
}

func bindataFronthairHairflipRightJson() (*asset, error) {
	bytes, err := bindataFronthairHairflipRightJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/fronthair/hairflip-right.json", size: 981, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGirlnamesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x53\xbb\x8e\xdc\x30\x0c\xec\xf3\x19\x57\xe7\x27\x82\xe0\x80\x4d\x0c\x6f\xb1\xde\x20\x30\x82\x14\xbc\x9c\x10\x2b\x82\x45\xc0\x5e\x16\xf6\xd7\x47\x9a\x21\xf7\x1a\xce\x90\x1c\x51\xa4\x1e\xbf\x5e\xbe\xe4\x97\xcf\xcd\x14\x05\xac\xf4\xaa\x00\x36\x78\x45\x6a\x02\x26\x66\x8b\x5b\x2e\x29\x79\x83\x98\x39\x85\xdd\xad\x20\xf6\x68\x04\xa2\x43\x68\x4b\xa0\x47\xd7\x44\xac\x81\x3d\xfe\x75\xc9\xd0\x01\x8b\x47\xaa\xb4\x62\xa4\x87\x06\x7a\xd2\xad\x39\x20\xfa\x8a\x7e\x5e\xa3\x83\x8b\x60\xa4\x0e\xee\x6f\xec\x11\x24\x22\xd4\xb4\x5d\x31\x38\x88\x81\x78\xa2\x35\x41\xb2\x71\xeb\x4b\x7e\x28\xf6\xb9\x68\x55\x96\xd3\x7d\xc9\x81\xd4\xe8\x83\x55\xbe\x9d\x06\xed\x77\xab\x48\x0c\x92\xde\x13\xb0\x6a\x05\x2a\xb6\xed\x68\xc0\x9d\x0b\x06\x39\xd9\xe2\x90\x58\x72\xc8\x05\x82\x76\x5b\xee\xfb\x51\x0c\xba\x08\x53\xcd\xdf\x18\x79\x28\x0e\x77\xb0\x10\x1f\x6e\xbb\x6e\x94\x0c\x5b\x9a\x0c\x64\xa5\x5f\x83\x30\xba\x71\xe9\x28\x7b\xc4\x77\x3b\x18\x39\x50\x26\xfd\x65\xab\x63\x82\xcd\x7f\x96\x27\x72\x65\x7e\xe7\x70\x63\x2e\x0e\x58\x97\xfd\x3a\xc6\x4c\xbb\x8b\xa7\xe3\xde\xc6\x4c\xdd\x11\x3a\xee\x97\xdb\x89\x40\xa8\x09\x76\xe5\xe9\x83\x40\xa7\xde\xf2\x95\xf7\x7e\x8d\x89\xae\xa2\x1e\x57\xf7\xfb\x4e\x1f\x4c\x83\x31\xab\x58\x1c\xc5\x6e\xd2\xef\xe9\x86\x19\x6f\x09\xdc\x13\x99\x0e\xf6\xba\x61\x96\x49\x62\xf6\x89\x33\x35\x30\xfc\x14\x12\x4f\xf9\xfb\x99\xda\x39\xe2\x7c\xa6\x14\x5d\x4c\xed\xcd\xff\x33\x27\xfa\xe6\x8c\xa7\xd8\xc8\xc9\xe7\x3b\x2d\xd6\xb7\x9e\x94\xa5\xe3\x92\x27\x3b\xcd\x01\x5f\xec\x2e\xfe\x93\x3a\x81\xf4\x2e\x2e\xbd\xeb\x07\xd1\x27\x41\x57\xf7\xdd\xde\xd8\x3c\x18\x2b\xf5\xe3\x82\xec\x07\xfc\x66\xe1\xfd\x6c\x85\x31\xfe\x2c\xf8\xa7\x33\x6b\xcd\xfe\x1f\xe6\xe7\x7f\x98\xfd\x83\xce\x06\xb5\x65\x5a\xae\xe5\x55\xcc\xb1\xc5\x1c\xd2\x35\x3b\xb8\xbf\xd1\x37\xda\x22\x8e\x1e\x75\x91\x79\x4d\xbc\x95\xdf\x9f\xfe\x07\x00\x00\xff\xff\xee\x94\xd2\xab\xeb\x04\x00\x00")

func bindataGirlnamesJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataGirlnamesJson,
		"bindata/girlnames.json",
	)
}

func bindataGirlnamesJson() (*asset, error) {
	bytes, err := bindataGirlnamesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/girlnames.json", size: 1259, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGroundfloorBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\xcd\x6e\xd3\x4c\x14\x86\x3d\x5f\xea\x7c\x0b\x88\xd8\x21\xb1\x1e\x55\x2c\x90\xca\x1e\xb1\xae\xd8\x54\x2c\x40\x62\xd1\xb2\xa8\x44\x44\x23\x81\x54\xd1\xae\xd8\x51\xb8\x02\x6e\xc1\x62\x87\xe0\x16\xb8\x11\x6e\xc5\x66\x92\x4c\x1c\xff\xcc\x78\xfe\x3c\xf6\x49\xf2\x56\x8f\x52\xa7\x3e\x9e\xd8\xe7\x39\x33\x19\x57\xa3\xe4\x59\xf1\x65\xc2\xd8\xe4\xec\xf2\x9a\x15\x77\x09\x3b\x62\xe9\xeb\xc5\x87\xf9\x0d\x2b\xbe\x89\x27\xaf\x16\x9f\xe7\xec\x28\x61\xe9\x9b\xc5\xbb\xdb\xab\xe5\xd6\xf4\xc5\x7c\xf1\xfe\xea\x56\x6c\x26\xc9\xa3\xe2\xeb\x7f\x8c\xdd\x3b\x7f\xfb\xf1\xf2\xfa\xe6\x64\x79\xd8\xea\xa8\x69\x92\xe4\x9f\x7e\x17\x77\x2c\x7f\x9c\xe5\x29\x07\x71\x99\x3d\x95\xf8\xb7\xf0\x13\x44\xe4\xc1\x2f\x89\xc7\xb1\x10\x34\x00\x10\x44\x1c\x08\x22\x0e\x04\x11\x07\x82\x88\x03\x41\xc4\x81\x20\xe2\x40\x10\x29\x4a\x1d\x81\x40\x10\x04\x1d\x26\xd1\x04\x71\x9e\x4f\x33\x25\xe3\xed\xe0\xe4\x8b\x27\x9e\x8e\xfc\xfe\x09\x71\x0e\x5c\xce\xec\x82\x22\x90\x03\x39\x90\x03\x39\x90\x03\x39\x90\x03\x39\x90\x03\x39\x90\x03\x39\xfe\x72\x68\x73\xe0\x72\x46\xef\x24\xe8\x39\x90\x03\x39\x90\x03\x39\x84\x80\x1c\xc2\x40\x0e\x61\x20\x87\x30\x90\x43\x98\xb8\x72\x68\x73\xc0\x72\xaa\x3f\xf9\x9f\x27\x02\x6e\xfb\x33\x7e\x5a\x3a\x91\x27\x59\x2e\x47\x58\x5d\x5c\x65\x69\x42\xe3\x32\x6a\x15\xcb\x32\x59\x1b\xb5\x1e\x6c\xac\x24\xd1\xbe\x78\x9c\xfc\x58\x85\x8a\x36\x42\x28\x5f\x3f\x3d\x97\x67\x21\xce\x7b\xec\x9c\xda\xa6\x5e\xe4\x60\x9b\x0f\x43\xd7\x2b\x9f\x94\xb9\x66\x99\x42\xca\xf2\xf2\xcb\x50\x91\x93\x46\xd2\x3b\x10\x3e\x96\x9a\x59\xd6\xcf\x70\x51\x51\x52\x29\xa2\xc6\x2a\x18\xde\xaa\x32\x75\x40\x7d\x8b\x1b\xf7\x6f\x32\x6b\x2c\xc2\x76\x9e\xca\xf2\xd1\x25\x55\xd7\x88\x2e\xa9\xdb\x22\xdf\x68\x93\xdb\xc6\xaa\xb6\xa8\x76\x9e\xff\x9f\x29\xe9\xea\x86\x5e\x07\x75\xd6\xa4\x55\xb4\x93\x92\x2a\x2a\x25\x5c\x7a\xab\x62\x7e\x91\xa5\x8e\xbe\x0a\xdc\x29\x25\xdd\x3a\xcc\x3b\xd6\xbe\x3b\x1f\x5d\xa3\xcd\x99\x52\x67\x58\xd7\x3b\x5a\x33\x3a\x27\x19\x8d\x2a\xef\xa7\x6f\x58\x15\xda\xf3\x0d\xa6\x32\x24\x21\xa4\x3d\x6f\xee\x18\xb0\x68\xf4\x0f\x1b\x25\x67\x1d\x42\x4e\xf5\x3a\xd6\x4d\xdb\x26\xd8\x2d\xda\xaf\x7f\xe8\x07\xab\xdd\xe9\x1f\xbc\x43\x06\xe5\xc1\x4a\x91\x61\xda\x3d\x43\x93\x73\xbb\x1d\xc4\x65\xd8\xf5\x8c\xde\xdf\x3b\x6c\xee\x16\x2c\x22\xc5\x14\xe9\xaf\x12\xc3\xbc\x4a\x77\x90\x4b\xe9\xb8\x46\xf7\xf8\xbe\xe1\x3d\xab\x52\xde\x14\x1b\x6e\x94\xe5\xad\xa6\x31\x42\xfd\x37\x0a\xf3\x17\x49\xe3\xa9\x11\xd7\x78\xcb\x06\x63\xb4\xe9\x1d\xdf\x57\x45\xfa\x8e\xd7\xc0\x8f\x01\xe6\x35\x20\x48\x4d\xcc\x59\x0e\x08\x52\xd3\xff\x9c\x67\xc8\xf7\x98\x76\x7c\x40\x3e\x24\xe5\xd8\xbe\xde\x18\xe5\xbd\xc7\x6d\x06\xa4\x9c\x7f\x58\xcf\x6e\xe4\x5f\x02\x93\x57\x69\xc9\x72\x36\xa4\xda\xa9\x19\xaf\xad\x19\x38\x3a\x38\x69\xed\x69\x33\xa5\xeb\x55\xc8\x30\xdd\x69\xc9\x31\xa4\xf9\x72\x11\xee\xe8\x14\xe7\xcb\x8e\xfd\x65\xb0\x63\xa5\x0c\xb7\xeb\x8d\x99\x1d\xd2\x32\x66\x17\xf5\x64\x66\x1b\x19\xba\xc7\x4d\xd2\x75\x8f\x7b\x2b\x23\xf5\xf9\xbf\x9e\x5b\x74\xe3\x52\xfa\x93\x31\xdb\xae\x7b\xf0\xbb\xde\x48\xd9\x41\xcf\xd8\x87\x9e\x31\x80\x8c\xd6\xb0\xdf\x97\x8c\x80\xf4\x0e\x2c\xa3\x95\x02\x2d\xab\x52\x8d\xf8\x3f\xc0\x68\x32\x66\x4e\x2b\x3b\x6a\xd7\x1b\x33\x3b\x55\x19\x2b\xea\x2b\x07\xd4\xbf\xec\x82\x2c\x63\xb8\x6c\x31\x30\xcd\xd5\xa6\x7a\x3a\x39\x9b\xa0\x1d\xfd\x0c\xdc\xf0\xaa\x1e\xfb\x0a\x1c\x80\x1c\xc2\xec\xaa\x1c\x3f\x20\x27\xae\x9c\xda\xe7\x42\xb5\x16\x63\x56\xd7\x63\xe6\x3b\xf5\xb9\x51\xbb\x2c\xc5\x40\x63\xb1\xf0\x1e\x00\x41\xc4\x81\x20\xe2\x40\x10\x71\x20\x88\x38\x10\x44\x1c\x08\x22\x0e\x04\x11\x07\x82\x88\x03\x41\xc4\x81\x20\xe2\xa4\x03\x7e\x05\xe0\x00\x84\x7f\xcb\x20\x3d\x58\xfe\xf2\x94\xe5\xec\x21\x2b\xbe\x27\xff\x02\x00\x00\xff\xff\x8c\x01\xf5\xe6\x07\x73\x00\x00")

func bindataGroundfloorBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataGroundfloorBin,
		"bindata/groundfloor.bin",
	)
}

func bindataGroundfloorBin() (*asset, error) {
	bytes, err := bindataGroundfloorBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/groundfloor.bin", size: 29447, mode: os.FileMode(436), modTime: time.Unix(1526583523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataHairaccAhogeJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x4b\xcc\x4d\x55\xb2\x52\x72\xcc\xc8\x4f\x4f\x55\xd2\x51\xf2\x74\x01\x72\x52\x52\xd3\x12\x4b\x73\x4a\x74\x13\xa1\x82\x01\x99\xc9\x4a\x56\xd5\x4a\x2e\x89\x25\x89\x4a\x56\xd1\xd1\xd5\x4a\xce\x40\x45\x0a\x40\x09\xb7\x74\x25\x2b\x03\x1d\x25\x27\x10\x55\xab\x43\x1f\x71\x7d\xa8\xb8\x21\x9a\x78\x02\xba\x78\xac\xce\x00\xbb\x34\x26\x06\xc3\x49\xb1\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x1a\x0a\x2c\x82\x74\x01\x00\x00")

func bindataHairaccAhogeJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataHairaccAhogeJson,
		"bindata/hairacc/ahoge.json",
	)
}

func bindataHairaccAhogeJson() (*asset, error) {
	bytes, err := bindataHairaccAhogeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/hairacc/ahoge.json", size: 372, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataRoofBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xda\x3f\x6b\xc2\x40\x18\xc7\xf1\x7b\x9a\x3f\x43\x5b\x08\x1d\xbb\x94\x52\xc8\xda\x17\x90\xa1\x73\x17\x27\x05\x07\x71\x08\x18\xcc\x81\x42\x20\x99\xdc\x8c\xbe\x1e\x5f\x9f\xd3\x9d\x89\x7b\x16\xbd\x23\x3f\xe5\x77\x7c\x86\x73\x38\xef\x91\xaf\xe3\x65\x76\x1f\x88\x04\x93\xbc\x12\xdb\x2a\x09\x25\x9a\xe9\x4d\x51\x8b\x3d\x76\x1f\xa6\x7a\x57\x48\xa8\x24\x9a\xeb\x55\x53\xf6\xbb\xf8\xbf\xd0\xeb\xb2\xe9\xb6\x4a\x7d\xda\xc3\x8b\xc8\xdb\x62\xb9\xcd\xab\xfa\xb7\x3f\x76\x3d\x15\x2b\x65\xd2\xb3\x6d\xc5\x24\x1f\xe9\xc0\xfa\xf6\xb1\x86\x2e\x4b\x4d\x72\xba\x93\xa7\x81\x1d\x0c\xe6\xe4\x3b\xbc\x2c\x8c\x1f\x47\x4e\x30\x05\x0c\xa6\x80\xc1\x14\x30\x98\x02\x06\x53\xc0\x60\x0a\x18\x4c\x01\x83\x29\x60\x30\x05\x0c\xa6\x80\xc1\x14\x30\x98\x02\x06\x53\xc0\x60\x0a\x18\x4c\x01\x83\x29\x60\x30\x05\x0c\xa6\x80\xc1\x14\x30\x98\x02\xc6\x58\x2f\x1c\x6e\xbd\x76\xa4\xd7\x26\x7e\xde\xc0\x3c\xcf\xb8\xef\x7f\x8f\x34\xae\xd3\xbf\x96\x98\xaf\x1f\x31\xf2\x2a\x99\xba\x04\x00\x00\xff\xff\x36\x79\x5a\xcd\x50\x26\x00\x00")

func bindataRoofBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataRoofBin,
		"bindata/roof.bin",
	)
}

func bindataRoofBin() (*asset, error) {
	bytes, err := bindataRoofBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/roof.bin", size: 9808, mode: os.FileMode(436), modTime: time.Unix(1526584463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataSurnamesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x93\xcf\x6e\xf2\x30\x10\xc4\xef\xdf\x63\x70\xfe\x5e\x02\x55\x6d\x89\xa2\x90\x43\x40\x08\x55\x3d\x6c\xc0\x22\x5b\x2b\xb6\x14\xb0\x10\x3c\x7d\xf7\xcf\xb8\xed\x69\x7e\x8c\xed\xcd\xec\xda\x7c\xac\xd6\x63\x58\xfd\x5f\xad\xd3\x39\xab\xe4\xc8\x2a\x0b\xa9\xbc\x4c\x3c\x92\xe8\xab\x2f\xbe\x95\x2f\x66\xe8\x9c\x6f\xd5\xba\x11\xe0\x4e\x8b\x63\x2c\x67\x85\x77\xdf\xb3\x71\x5b\xe5\xec\x70\x0d\x17\xba\x03\xa7\x5a\x6a\x43\x0f\xfd\xa5\xc4\x0b\x25\xb5\x9a\x18\xec\x44\x33\x5b\x9c\x26\xe5\xa2\x59\x1b\xd9\xe6\xbe\x00\x43\xa3\x57\x6c\xac\x56\x73\xa7\x2b\x59\x27\x2d\xa5\x10\xb3\x81\xad\xb4\x1c\xcb\xc9\xbe\xd2\xf2\x5c\x2c\x58\xcb\x29\x4b\x01\x6b\xa3\xcd\xe3\x4f\x8c\x36\x4b\x9b\x6e\x7a\xff\x6d\x19\x5d\xec\x57\x47\x1e\xae\xa3\xa5\x3c\x68\x76\xbc\x16\x78\xb7\xbf\xc4\x15\xd0\xaa\xb1\x01\x7b\x84\x8e\xa5\x02\xd6\x04\x9f\x9e\xbd\xcb\x4b\x15\x0b\xd7\xc9\xe6\x48\x33\x03\xcd\xdb\x8a\x83\x61\x2a\x22\xb1\x22\xba\x53\xb4\x61\x2a\x20\xe7\x96\x75\xec\x58\xcf\x17\x0c\x64\x9b\x61\xf5\x28\xd8\x4f\x76\xb0\x8f\x7e\x6f\xa2\xc8\xd8\x27\xf6\x11\xf5\xbe\xc1\x92\xf4\xd2\x53\x54\x18\x88\x6d\xd7\xaf\x46\xbb\x3e\x55\x14\x10\x2c\x0b\xcc\xe4\x06\xee\x6b\xf0\x6b\x1a\xf4\xe5\x59\x59\xa1\x99\x9f\x45\xa9\x68\x2e\x4b\x28\x58\x9f\x8d\x22\xda\x1a\xca\xb3\x58\x91\x1d\x21\xb2\xc2\xa5\x3a\x13\xee\x55\x38\xd4\xd5\x80\xde\x77\x75\x5c\x3b\x4a\x14\x01\x5c\x27\xb3\x3f\xe1\xc1\xed\x03\xc4\x42\x1f\xfc\x23\x07\x09\x9a\xc8\xfe\x45\x47\x09\x62\x9e\x42\x3d\xad\x8c\xb0\x8a\xf5\xa9\x29\xe3\xa2\x8f\x39\x66\xf4\x70\xcc\xfe\xb8\x3f\xff\x7d\x07\x00\x00\xff\xff\x77\xaf\x26\x2d\x9a\x03\x00\x00")

func bindataSurnamesJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataSurnamesJson,
		"bindata/surnames.json",
	)
}

func bindataSurnamesJson() (*asset, error) {
	bytes, err := bindataSurnamesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/surnames.json", size: 922, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataTopicalMolerightJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\x56\xf2\x74\x51\xb2\x52\x4a\x49\x4d\x4b\x2c\xcd\x29\xd1\xcd\xcd\xcf\x49\xd5\x2d\xca\x4c\xcf\x28\x51\xd2\x51\xf2\x4b\xcc\x4d\x05\xca\xf9\x02\xc5\x14\xf2\xf3\x14\x4a\x32\x52\x15\x60\x52\x01\x99\xc9\x4a\x56\xd5\x4a\x2e\x89\x25\x89\x4a\x56\xd1\xd1\xb1\x3a\x08\x54\xad\xe4\x94\xae\x64\x65\xa0\xa3\xe4\x0c\xd4\xab\x00\x54\xeb\x06\xe2\xd6\xea\x0c\x6a\x71\x3d\xb8\x78\x6c\x6c\x6d\x2d\x17\x20\x00\x00\xff\xff\xfc\xf5\x58\x47\x16\x01\x00\x00")

func bindataTopicalMolerightJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataTopicalMolerightJson,
		"bindata/topical/moleright.json",
	)
}

func bindataTopicalMolerightJson() (*asset, error) {
	bytes, err := bindataTopicalMolerightJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/topical/moleright.json", size: 278, mode: os.FileMode(436), modTime: time.Unix(1526761683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/athletics.bin": bindataAthleticsBin,
	"bindata/backhair/feathered.json": bindataBackhairFeatheredJson,
	"bindata/backhair/long.json": bindataBackhairLongJson,
	"bindata/backhair/twintails.json": bindataBackhairTwintailsJson,
	"bindata/backhair/veryshort.json": bindataBackhairVeryshortJson,
	"bindata/boynames.json": bindataBoynamesJson,
	"bindata/building.json": bindataBuildingJson,
	"bindata/enbynames.json": bindataEnbynamesJson,
	"bindata/face.json": bindataFaceJson,
	"bindata/firstfloor.bin": bindataFirstfloorBin,
	"bindata/fronthair/curtains.json": bindataFronthairCurtainsJson,
	"bindata/fronthair/hairflip-left.json": bindataFronthairHairflipLeftJson,
	"bindata/fronthair/hairflip-right.json": bindataFronthairHairflipRightJson,
	"bindata/girlnames.json": bindataGirlnamesJson,
	"bindata/groundfloor.bin": bindataGroundfloorBin,
	"bindata/hairacc/ahoge.json": bindataHairaccAhogeJson,
	"bindata/roof.bin": bindataRoofBin,
	"bindata/surnames.json": bindataSurnamesJson,
	"bindata/topical/moleright.json": bindataTopicalMolerightJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"athletics.bin": &bintree{bindataAthleticsBin, map[string]*bintree{}},
		"backhair": &bintree{nil, map[string]*bintree{
			"feathered.json": &bintree{bindataBackhairFeatheredJson, map[string]*bintree{}},
			"long.json": &bintree{bindataBackhairLongJson, map[string]*bintree{}},
			"twintails.json": &bintree{bindataBackhairTwintailsJson, map[string]*bintree{}},
			"veryshort.json": &bintree{bindataBackhairVeryshortJson, map[string]*bintree{}},
		}},
		"boynames.json": &bintree{bindataBoynamesJson, map[string]*bintree{}},
		"building.json": &bintree{bindataBuildingJson, map[string]*bintree{}},
		"enbynames.json": &bintree{bindataEnbynamesJson, map[string]*bintree{}},
		"face.json": &bintree{bindataFaceJson, map[string]*bintree{}},
		"firstfloor.bin": &bintree{bindataFirstfloorBin, map[string]*bintree{}},
		"fronthair": &bintree{nil, map[string]*bintree{
			"curtains.json": &bintree{bindataFronthairCurtainsJson, map[string]*bintree{}},
			"hairflip-left.json": &bintree{bindataFronthairHairflipLeftJson, map[string]*bintree{}},
			"hairflip-right.json": &bintree{bindataFronthairHairflipRightJson, map[string]*bintree{}},
		}},
		"girlnames.json": &bintree{bindataGirlnamesJson, map[string]*bintree{}},
		"groundfloor.bin": &bintree{bindataGroundfloorBin, map[string]*bintree{}},
		"hairacc": &bintree{nil, map[string]*bintree{
			"ahoge.json": &bintree{bindataHairaccAhogeJson, map[string]*bintree{}},
		}},
		"roof.bin": &bintree{bindataRoofBin, map[string]*bintree{}},
		"surnames.json": &bintree{bindataSurnamesJson, map[string]*bintree{}},
		"topical": &bintree{nil, map[string]*bintree{
			"moleright.json": &bintree{bindataTopicalMolerightJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

