// Code generated by go-bindata.
// sources:
// bindata/athletics.bin
// bindata/firstfloor.bin
// bindata/groundfloor.bin
// bindata/roof.bin
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataAthleticsBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xdd\xbf\x6e\x23\x55\x14\x80\x71\x5f\xb2\x09\x05\x0c\x5b\x53\xbb\x04\x85\x9e\x07\x88\x68\x52\x81\x44\xb1\x50\xac\x44\xc4\x46\x02\x69\xa5\xdd\x8a\x6a\x59\xa8\x79\x89\x68\x3b\x44\x4d\xc9\x23\xf0\x00\xd0\xf3\x12\x6b\x63\x6f\xec\x64\x3c\x76\xc6\x33\x73\xce\xb9\xe7\xcc\x9d\x0f\x7d\x98\x58\x51\xcc\x9d\x7b\x7f\xbe\xf1\xbf\xd8\x9f\x2f\x7f\x3e\x49\xe9\xe4\xf2\xe9\xf3\xb4\x7c\x3d\x4b\x8f\xd2\xe9\x57\xd7\x3f\x5c\xbd\x48\xcb\x5f\x57\x67\xbe\xbc\xfe\xe9\x2a\x3d\x9a\xa5\xd3\xaf\xaf\xbf\x7b\xf9\x6c\xfd\xd5\xd9\x17\x57\xd7\xdf\x3f\x7b\xb9\xfa\x72\x36\xfb\x78\xf9\xcb\x7b\x29\x7d\xf0\xe4\xdb\x1f\x9f\x3e\x7f\x71\xbe\xfe\xb1\x77\x3f\x75\x36\x9b\xbd\x4d\xaf\x7e\x5b\xbe\x4e\x8b\x57\xff\x2d\x4e\xe7\x44\xe1\xaa\x7e\x27\x8a\x12\x26\x29\x5a\x98\xa4\x68\x45\x37\x79\x4e\xf6\xb9\xaf\x72\x58\x93\xee\x4b\x43\xf5\xa6\x6c\xd2\x7d\xf2\xa9\xbd\xe9\x98\x74\x9f\x6a\xea\x55\xd9\x26\xdd\xa7\x97\x24\x15\x66\xd2\x7d\x3e\x49\xab\x02\x4c\xba\xcf\x21\x59\x34\x52\x93\xee\xf3\x46\xd6\x8d\xcb\x64\xbc\xe3\x25\xfd\x35\xd2\x5e\x26\x2b\x93\xde\xc7\x45\xa2\x5c\x97\xcf\xc4\x24\x14\xcb\xc8\x89\xa5\xbe\x49\x28\x96\x57\x5e\x96\xca\x26\xd1\x58\x70\xb9\x58\x6a\x9a\x44\xe3\x14\xb2\x67\xa9\x66\x12\x8d\x93\xca\x92\xa5\x8e\x49\x40\x4e\x30\xb3\x0d\x53\xc1\x24\x20\x27\x9b\x0d\x4b\x5b\x93\xee\x93\x46\xd6\x05\x34\x09\x48\x0a\x65\x12\x90\x74\x9b\xea\x6e\x39\xdc\x24\x20\xa9\x5e\x64\x93\xee\x93\x43\x2e\xe9\x6d\x95\x03\x4d\x02\x92\xf6\xc3\x24\x05\x4c\x83\xe5\x10\x93\x80\xa4\x96\x30\x49\x01\x93\xb1\xec\x6d\x12\x90\xd4\x25\x01\x4b\x4c\x92\x49\xd9\x4c\x02\x92\xba\x37\x94\x25\x26\xc9\xaa\x0c\x26\x01\x49\x7d\xc3\x24\x45\x0b\x93\x14\x2d\x53\x93\x80\xa4\x61\xf5\x97\x83\x49\xb2\x0d\x93\x14\x2d\x4c\x52\xb4\xfa\x3f\x22\x84\x49\x32\x0f\x93\x14\x2d\x0b\x93\x80\x24\x49\x98\xa4\x68\x61\x92\xa2\x85\x49\x8a\x16\x26\x29\x5a\x98\xa4\x68\x61\x92\xa2\x85\x49\x8a\x16\x26\x29\x5a\x16\x26\xfb\x5f\x2c\xd1\x7d\x98\xa4\x68\x61\x92\xa2\x85\x49\x8a\x56\x4f\x39\x98\x24\xdb\xfa\xcb\xc1\x24\xd9\x86\x49\x8a\x96\x9d\xc9\x87\x2e\xdc\xfd\x90\x29\x72\x0f\x81\x34\x35\x09\x4b\x6a\x69\x90\x19\x4c\x92\x55\x83\x36\xc9\x8a\xf7\xb0\x22\xbb\x30\x49\xa1\x1a\x0a\xb2\xe2\x3d\x51\xc9\x28\x4c\x52\xb4\x04\x4e\xd4\xde\x63\xdf\x7d\x12\x28\x4e\x82\x4d\xb2\xe2\x73\x1f\x48\xbd\x16\x90\x76\x26\x5b\xfe\xbf\xee\x13\x42\xee\xc9\x40\x56\x98\x24\xdd\xc4\x20\x2b\x3e\x03\x94\x14\x13\xff\xd6\xbe\x8d\xcf\x4a\x26\x9d\x94\x40\x56\x7c\xa6\x3c\xa9\xd4\x0e\x32\xa7\xc9\xf6\xc1\xb8\x4f\x14\xe5\x49\x15\x64\x65\x6a\x12\x96\x53\x48\x1b\x64\x25\x37\x79\x74\x54\xee\x93\x46\x76\x19\x80\xac\x54\x4c\x1e\x1d\x9b\xfb\xd4\x91\x45\x36\x20\x2b\x2d\x93\x47\x47\xe8\x3e\x81\xa4\xdb\x51\x90\x11\x4c\x76\x19\xa7\xfb\x4c\x92\xbc\x2e\x1a\x65\x6b\xad\x69\xb2\xcb\x80\xdd\xa7\x94\x24\xd9\x83\xac\xd4\x4d\x76\x1c\xb6\xfb\xdc\x52\xaf\x3a\x52\x54\x5a\x59\x7d\x93\xdd\x0f\xc1\x7d\xaa\xe9\x68\xdd\x35\xea\x2d\xa8\x89\xc9\xbe\xc7\x82\xcf\x80\xf9\xad\xa0\x95\xc9\x61\xc7\x05\x51\xf7\x02\xac\x97\xad\xc9\xc1\xc7\x48\x63\xc9\xc0\x8c\xb9\x49\x64\x16\x9c\x8d\x96\x4c\x26\x61\x59\x58\x96\x54\xf2\x99\x44\x66\x19\xd9\x23\xc9\x6d\x12\x99\x23\x2d\x23\x0f\x1f\x93\xf8\x1c\x4b\x1e\x24\xfc\x4d\x42\x34\x60\xae\x06\xc2\x99\xc4\xe7\x24\x1d\x8e\xc6\x24\x4d\x32\x4c\x52\xb4\x30\x49\xd1\xc2\x24\x45\x0b\x93\x92\x1e\xff\xb1\xc9\x7d\x24\x25\x85\x49\x49\x98\xb4\x08\x93\x92\x30\x69\x11\x26\x25\x61\xd2\x22\x4c\x4a\xc2\xa4\x45\x98\x94\x84\x49\x8b\x30\x29\x09\x93\x16\x61\x52\x12\x26\x2d\xc2\xa4\x24\x4c\x5a\x84\x49\x49\x98\xb4\x08\x93\x92\x30\x69\x91\xa9\xc9\xdb\x0b\x8f\x9c\xf0\x00\x31\x69\x91\xb5\xc9\xbb\x55\xb3\x6c\xbe\xfb\xcf\xe2\xec\x66\x7d\x2a\x1c\x3c\xde\x2c\x2a\xc3\xdb\xe2\xf1\x3f\x8b\x0f\xcf\x57\xa7\xf3\xc5\xfb\xff\x1e\x6c\xbe\xfe\xfe\x36\x2c\x86\xac\x38\x8b\x35\x72\xbb\xfc\xea\xe7\xcf\x6e\xa4\x87\x86\x46\x8b\xf2\x68\xfc\xe8\x5c\xb9\x96\x9d\xf1\xe6\x40\x0d\x8d\xec\x8c\x21\xcb\x67\x71\xa1\x57\x8b\xc5\xed\x0d\xc3\xbf\x3e\x41\x5f\xfc\x8a\xd0\xb7\xb2\x76\x4f\xad\xfe\x75\xa3\xdd\x6f\x21\x32\x64\x45\x88\xbc\xac\xfd\x6e\x3e\x79\x73\x80\xe2\xc9\x9b\xcb\x40\x16\x1b\xf7\xe8\xeb\xf5\x3e\xaf\xf5\x98\x00\xc2\xba\xfe\xc6\xdd\x08\x5b\x9d\xde\xf5\xee\x6c\xac\xfb\x22\x0f\x5c\x11\x0e\x8c\x54\xd2\xde\xee\x8f\xc3\xdc\x0e\xdb\x57\xd7\x7b\xa7\xbb\xbf\xb2\xec\x9d\xaa\x29\x6c\x5e\x10\x06\x63\xed\x85\x18\x0c\x55\xa1\x06\xd9\x07\x31\xe8\x67\xb0\xb1\x09\x6e\xb7\xc2\x86\x41\xad\xc7\xc6\x31\x88\xc1\x8d\xc1\xdd\xa7\x87\xeb\x93\xbf\xba\x6d\x8e\xb7\x40\x95\xe1\x8d\x3d\x0f\x83\x81\x0c\x72\xdb\x0f\x83\x31\x0c\xc6\xbe\x0f\xbc\x7e\x82\xf0\xf2\xd0\xad\x04\xcc\x8d\xd8\x5c\xf0\x7d\x6f\x67\x2c\xe9\x66\x13\xbb\x5e\x41\x02\x83\x3f\x0b\xb2\x1e\x40\xd3\x4b\xf5\xcd\x61\x3c\xc3\x15\x6e\xb6\x55\x77\x63\x45\xdb\xbb\x38\xbe\xfb\x5d\xc4\xdd\xfd\x56\xff\x39\x7d\xa2\xec\x4e\xe1\xda\x85\xc2\x9e\x0a\xbd\x5f\xfb\x32\xa8\x79\x63\xb7\x5a\xbf\x58\x0c\x85\x23\x56\x98\xf3\xf5\x7f\xc3\x6a\x5c\x35\xda\xcf\xa2\x6f\xac\xfa\x32\xbf\x12\x9a\xdd\x6f\x34\xfe\x32\xbd\x12\xff\x81\x65\x89\x75\x2f\xa4\x71\x6d\xd8\xde\x10\xdc\x1b\x27\x0e\x75\x1d\x1a\x37\xb6\xbf\x95\x6b\xde\x17\xde\xde\x11\xd6\x74\x18\xf8\x5e\x70\xa9\x0a\xe3\xfd\x85\x70\x86\x47\xfe\xd8\xef\x9a\x17\x1e\x39\x5f\x8d\xeb\x5b\x7c\x17\xca\xcf\x7d\xe0\x6f\x42\x49\x77\xc3\x0c\xcf\xff\xe2\x71\x42\xe1\x51\x3b\x3c\x4a\x1a\x81\xc7\x51\x2d\x2e\x1a\x25\x8d\x40\x23\xbb\xe3\x84\xc2\xa3\x76\x78\x94\x84\x47\xed\xf0\x28\x09\x8f\xda\xe1\x51\x92\x8e\xc7\xfd\xf0\x48\x43\x92\x3e\xfa\xad\xf7\x5e\x33\xfe\x73\xd1\x3d\xcc\x49\x12\x3e\xd3\x4c\x07\xc3\xa4\x24\x4c\x5a\x84\x49\x49\x98\xb4\x08\x93\x92\x30\x69\x11\x26\x25\x61\xd2\x22\x4c\x4a\xc2\xa4\x45\xee\xaf\x35\x1c\x75\xd5\x67\x9b\xdc\x47\x52\x56\xe9\x6d\x4a\x7f\xa7\x45\xfa\x73\xf5\xef\xa7\xb3\xff\x03\x00\x00\xff\xff\x2a\x25\xed\xb2\xe7\x80\x01\x00")

func bindataAthleticsBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataAthleticsBin,
		"bindata/athletics.bin",
	)
}

func bindataAthleticsBin() (*asset, error) {
	bytes, err := bindataAthleticsBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/athletics.bin", size: 98535, mode: os.FileMode(436), modTime: time.Unix(1526583562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataFirstfloorBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xcd\x6e\xd4\x30\x10\xce\xb0\x7f\x12\x6c\x8b\x38\x72\x41\x88\x70\xab\xb4\x0f\x50\x01\x47\xc4\xa5\x27\x90\x38\xb4\x1c\x2a\xb1\xa2\x2b\x81\x54\xa9\x3d\xd1\x13\x0b\x6f\x12\xf1\x02\x7d\x82\xbe\x08\x6f\x82\x92\xda\xeb\x6c\x62\x27\x63\x7b\x6c\xaf\xb3\xe9\x6a\x57\x9f\xd2\x89\x3d\x1e\x8f\x3f\x4f\x26\x93\x34\xc7\xc5\xaf\x01\xc0\xe0\xe4\xfc\x12\x8a\x65\x02\x43\x18\x7d\x5a\x7c\x9f\x5f\x41\xf1\x87\x9d\x7c\x5c\xfc\x9c\xc3\x30\x81\xd1\xe7\xc5\xd7\xeb\x0b\x2e\x8d\x3f\xcc\x17\xdf\x2e\xae\x99\x98\x24\xcf\x8b\xdf\x8f\x00\x9e\x9c\x7e\xf9\x71\x7e\x79\x35\xe3\xc3\x56\xa3\xc6\x49\x92\xbf\x5e\x16\x4b\xc8\x9f\x3e\x4b\x35\xbf\x97\x31\x7e\xc2\x74\x3e\xce\x04\x14\xb1\xfa\xe5\x90\xe5\xd3\x19\xc7\xc1\x59\x29\x4c\x67\x69\x25\x69\x71\x77\xc4\x8f\x83\xbf\x91\x5c\x67\x96\xeb\x59\x8c\x90\x7c\xad\x56\x00\xd9\x6a\xad\x55\xc7\xe8\xb4\xe9\xb8\x01\x6c\x4d\x0a\x6d\x98\x64\xeb\x6f\xd2\xec\xab\xe0\x36\x2b\x57\x10\xbc\x59\x37\xae\xcd\x8b\xb0\x62\x1d\xa2\xa3\xcc\x1e\x31\xf8\x9e\x91\xb4\x27\x19\x0a\x93\x19\xaf\x41\xe1\x9e\x3a\xd1\x2f\x63\x2c\x1c\x63\x3b\x22\xc3\x6e\x52\xa1\x9e\x8d\x60\xd7\x80\xf1\xe8\xad\x4d\xe7\x85\x32\x28\x82\xa7\x24\x9e\x10\x7e\x45\xd4\x33\x3b\x32\x7a\x4b\xbc\x1a\x40\xef\xd6\xb0\x85\x57\x2f\xc8\x6f\x71\x5c\x27\x1d\xaf\xb8\x17\xd3\x53\x5d\x74\xd3\xd6\xcc\x7b\x62\x20\xff\xbd\x9e\xfa\x98\x9e\xfa\xc5\xfd\x3a\xe1\x3c\x94\xb8\x4f\x0d\xc4\xf7\x39\xe1\x20\xfc\x06\x44\xfc\x96\x89\x27\xf7\xf5\x80\x78\x2c\xe2\x43\x72\x3d\x68\x8a\x23\x7c\xf9\x6e\xda\x93\x7f\x28\x2c\xf5\x8d\x6e\x50\x4c\x4f\xbd\xf3\xbc\x77\x75\x93\xf2\x7b\xda\xdd\x91\xfa\xbc\x84\xb5\xb5\xba\xed\x1a\x78\x5b\xf7\x95\x44\x89\xc6\xa9\x15\xae\xfa\x44\x83\x31\x6c\x7a\xeb\xfb\x45\x9b\x6f\x8e\xdd\xc3\x0f\x1b\xaf\x32\xf6\x08\xda\x88\xcd\x55\x1d\x7b\x04\x6d\x44\x68\x15\xd2\xe5\xbd\xa1\xad\x1f\xb0\xfa\x12\x55\x4e\x16\xc2\x56\xee\x19\xa6\xaa\x04\xad\x09\xc8\x15\x47\xb3\x05\xaf\x3b\xd0\x71\xfa\x09\xd0\x4e\x17\xf6\x3b\xd6\x56\x9b\x6e\x6f\xf8\xf1\x30\xad\x65\x5d\xfb\x61\xba\x1e\xdf\x2a\x41\x7b\xb4\xde\xd4\xfa\x3c\x52\x5e\xd7\x4d\xe3\x5d\x3c\xa1\xa5\x32\x8f\x08\xdd\x66\xb9\xa6\x1e\x79\xfb\x40\x5d\x6f\x44\x76\xfa\x44\xfd\xc1\x99\x42\x3d\x64\x58\xd4\xb7\xe5\xc9\x7f\x7e\x2a\x20\xcb\xb7\x37\x3b\x42\xbd\xe2\xb8\x03\x99\x0e\xda\x0d\xc7\x39\xf5\x12\x8f\x4d\x8a\x49\x19\xc0\x9f\xfa\x00\xed\xdd\x8b\x7a\x1d\x76\x3e\xea\xb7\x93\xeb\x27\x84\x37\x35\x0f\x37\xd7\x53\x02\xab\x0e\xc3\x98\xef\xb8\x90\x26\xb9\xa8\x54\xd7\xa9\xd0\xdd\xbe\x15\xaf\x5a\x50\xea\xdd\xd6\x1b\x91\x1d\xf5\x7f\xcf\xf8\x1f\x9a\x12\x51\x27\x2d\x2d\x52\x48\x35\xa4\x12\xd9\xd4\x86\x9c\xa3\x28\x05\x7e\xd1\x50\x2d\x77\xf8\xd6\x61\x53\xd9\x36\x6d\xf4\xfb\x0a\x77\x77\x5d\x77\xa7\x6b\x77\xa7\x6f\xec\x2c\xa2\xcf\x26\xe2\x0a\xed\xd8\xdd\xfa\xa3\x0d\xc2\x17\x1e\xab\x0e\xcf\x99\x20\x7f\xf1\x0a\x72\x78\x0c\xc7\xc9\x7d\x00\x00\x00\xff\xff\x2f\xcb\x23\x4a\xda\x24\x00\x00")

func bindataFirstfloorBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataFirstfloorBin,
		"bindata/firstfloor.bin",
	)
}

func bindataFirstfloorBin() (*asset, error) {
	bytes, err := bindataFirstfloorBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/firstfloor.bin", size: 9434, mode: os.FileMode(436), modTime: time.Unix(1526583495, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGroundfloorBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\xcd\x6e\xd3\x4c\x14\x86\x3d\x5f\xea\x7c\x0b\x88\xd8\x21\xb1\x1e\x55\x2c\x90\xca\x1e\xb1\xae\xd8\x54\x2c\x40\x62\xd1\xb2\xa8\x44\x44\x23\x81\x54\xd1\xae\xd8\x51\xb8\x02\x6e\xc1\x62\x87\xe0\x16\xb8\x11\x6e\xc5\x66\x92\x4c\x1c\xff\xcc\x78\xfe\x3c\xf6\x49\xf2\x56\x8f\x52\xa7\x3e\x9e\xd8\xe7\x39\x33\x19\x57\xa3\xe4\x59\xf1\x65\xc2\xd8\xe4\xec\xf2\x9a\x15\x77\x09\x3b\x62\xe9\xeb\xc5\x87\xf9\x0d\x2b\xbe\x89\x27\xaf\x16\x9f\xe7\xec\x28\x61\xe9\x9b\xc5\xbb\xdb\xab\xe5\xd6\xf4\xc5\x7c\xf1\xfe\xea\x56\x6c\x26\xc9\xa3\xe2\xeb\x7f\x8c\xdd\x3b\x7f\xfb\xf1\xf2\xfa\xe6\x64\x79\xd8\xea\xa8\x69\x92\xe4\x9f\x7e\x17\x77\x2c\x7f\x9c\xe5\x29\x07\x71\x99\x3d\x95\xf8\xb7\xf0\x13\x44\xe4\xc1\x2f\x89\xc7\xb1\x10\x34\x00\x10\x44\x1c\x08\x22\x0e\x04\x11\x07\x82\x88\x03\x41\xc4\x81\x20\xe2\x40\x10\x29\x4a\x1d\x81\x40\x10\x04\x1d\x26\xd1\x04\x71\x9e\x4f\x33\x25\xe3\xed\xe0\xe4\x8b\x27\x9e\x8e\xfc\xfe\x09\x71\x0e\x5c\xce\xec\x82\x22\x90\x03\x39\x90\x03\x39\x90\x03\x39\x90\x03\x39\x90\x03\x39\x90\x03\x39\xfe\x72\x68\x73\xe0\x72\x46\xef\x24\xe8\x39\x90\x03\x39\x90\x03\x39\x84\x80\x1c\xc2\x40\x0e\x61\x20\x87\x30\x90\x43\x98\xb8\x72\x68\x73\xc0\x72\xaa\x3f\xf9\x9f\x27\x02\x6e\xfb\x33\x7e\x5a\x3a\x91\x27\x59\x2e\x47\x58\x5d\x5c\x65\x69\x42\xe3\x32\x6a\x15\xcb\x32\x59\x1b\xb5\x1e\x6c\xac\x24\xd1\xbe\x78\x9c\xfc\x58\x85\x8a\x36\x42\x28\x5f\x3f\x3d\x97\x67\x21\xce\x7b\xec\x9c\xda\xa6\x5e\xe4\x60\x9b\x0f\x43\xd7\x2b\x9f\x94\xb9\x66\x99\x42\xca\xf2\xf2\xcb\x50\x91\x93\x46\xd2\x3b\x10\x3e\x96\x9a\x59\xd6\xcf\x70\x51\x51\x52\x29\xa2\xc6\x2a\x18\xde\xaa\x32\x75\x40\x7d\x8b\x1b\xf7\x6f\x32\x6b\x2c\xc2\x76\x9e\xca\xf2\xd1\x25\x55\xd7\x88\x2e\xa9\xdb\x22\xdf\x68\x93\xdb\xc6\xaa\xb6\xa8\x76\x9e\xff\x9f\x29\xe9\xea\x86\x5e\x07\x75\xd6\xa4\x55\xb4\x93\x92\x2a\x2a\x25\x5c\x7a\xab\x62\x7e\x91\xa5\x8e\xbe\x0a\xdc\x29\x25\xdd\x3a\xcc\x3b\xd6\xbe\x3b\x1f\x5d\xa3\xcd\x99\x52\x67\x58\xd7\x3b\x5a\x33\x3a\x27\x19\x8d\x2a\xef\xa7\x6f\x58\x15\xda\xf3\x0d\xa6\x32\x24\x21\xa4\x3d\x6f\xee\x18\xb0\x68\xf4\x0f\x1b\x25\x67\x1d\x42\x4e\xf5\x3a\xd6\x4d\xdb\x26\xd8\x2d\xda\xaf\x7f\xe8\x07\xab\xdd\xe9\x1f\xbc\x43\x06\xe5\xc1\x4a\x91\x61\xda\x3d\x43\x93\x73\xbb\x1d\xc4\x65\xd8\xf5\x8c\xde\xdf\x3b\x6c\xee\x16\x2c\x22\xc5\x14\xe9\xaf\x12\xc3\xbc\x4a\x77\x90\x4b\xe9\xb8\x46\xf7\xf8\xbe\xe1\x3d\xab\x52\xde\x14\x1b\x6e\x94\xe5\xad\xa6\x31\x42\xfd\x37\x0a\xf3\x17\x49\xe3\xa9\x11\xd7\x78\xcb\x06\x63\xb4\xe9\x1d\xdf\x57\x45\xfa\x8e\xd7\xc0\x8f\x01\xe6\x35\x20\x48\x4d\xcc\x59\x0e\x08\x52\xd3\xff\x9c\x67\xc8\xf7\x98\x76\x7c\x40\x3e\x24\xe5\xd8\xbe\xde\x18\xe5\xbd\xc7\x6d\x06\xa4\x9c\x7f\x58\xcf\x6e\xe4\x5f\x02\x93\x57\x69\xc9\x72\x36\xa4\xda\xa9\x19\xaf\xad\x19\x38\x3a\x38\x69\xed\x69\x33\xa5\xeb\x55\xc8\x30\xdd\x69\xc9\x31\xa4\xf9\x72\x11\xee\xe8\x14\xe7\xcb\x8e\xfd\x65\xb0\x63\xa5\x0c\xb7\xeb\x8d\x99\x1d\xd2\x32\x66\x17\xf5\x64\x66\x1b\x19\xba\xc7\x4d\xd2\x75\x8f\x7b\x2b\x23\xf5\xf9\xbf\x9e\x5b\x74\xe3\x52\xfa\x93\x31\xdb\xae\x7b\xf0\xbb\xde\x48\xd9\x41\xcf\xd8\x87\x9e\x31\x80\x8c\xd6\xb0\xdf\x97\x8c\x80\xf4\x0e\x2c\xa3\x95\x02\x2d\xab\x52\x8d\xf8\x3f\xc0\x68\x32\x66\x4e\x2b\x3b\x6a\xd7\x1b\x33\x3b\x55\x19\x2b\xea\x2b\x07\xd4\xbf\xec\x82\x2c\x63\xb8\x6c\x31\x30\xcd\xd5\xa6\x7a\x3a\x39\x9b\xa0\x1d\xfd\x0c\xdc\xf0\xaa\x1e\xfb\x0a\x1c\x80\x1c\xc2\xec\xaa\x1c\x3f\x20\x27\xae\x9c\xda\xe7\x42\xb5\x16\x63\x56\xd7\x63\xe6\x3b\xf5\xb9\x51\xbb\x2c\xc5\x40\x63\xb1\xf0\x1e\x00\x41\xc4\x81\x20\xe2\x40\x10\x71\x20\x88\x38\x10\x44\x1c\x08\x22\x0e\x04\x11\x07\x82\x88\x03\x41\xc4\x81\x20\xe2\xa4\x03\x7e\x05\xe0\x00\x84\x7f\xcb\x20\x3d\x58\xfe\xf2\x94\xe5\xec\x21\x2b\xbe\x27\xff\x02\x00\x00\xff\xff\x8c\x01\xf5\xe6\x07\x73\x00\x00")

func bindataGroundfloorBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataGroundfloorBin,
		"bindata/groundfloor.bin",
	)
}

func bindataGroundfloorBin() (*asset, error) {
	bytes, err := bindataGroundfloorBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/groundfloor.bin", size: 29447, mode: os.FileMode(436), modTime: time.Unix(1526583523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataRoofBin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xda\x3f\x6b\xc2\x40\x18\xc7\xf1\x7b\x9a\x3f\x43\x5b\x08\x1d\xbb\x94\x52\xc8\xda\x17\x90\xa1\x73\x17\x27\x05\x07\x71\x08\x18\xcc\x81\x42\x20\x99\xdc\x8c\xbe\x1e\x5f\x9f\xd3\x9d\x89\x7b\x16\xbd\x23\x3f\xe5\x77\x7c\x86\x73\x38\xef\x91\xaf\xe3\x65\x76\x1f\x88\x04\x93\xbc\x12\xdb\x2a\x09\x25\x9a\xe9\x4d\x51\x8b\x3d\x76\x1f\xa6\x7a\x57\x48\xa8\x24\x9a\xeb\x55\x53\xf6\xbb\xf8\xbf\xd0\xeb\xb2\xe9\xb6\x4a\x7d\xda\xc3\x8b\xc8\xdb\x62\xb9\xcd\xab\xfa\xb7\x3f\x76\x3d\x15\x2b\x65\xd2\xb3\x6d\xc5\x24\x1f\xe9\xc0\xfa\xf6\xb1\x86\x2e\x4b\x4d\x72\xba\x93\xa7\x81\x1d\x0c\xe6\xe4\x3b\xbc\x2c\x8c\x1f\x47\x4e\x30\x05\x0c\xa6\x80\xc1\x14\x30\x98\x02\x06\x53\xc0\x60\x0a\x18\x4c\x01\x83\x29\x60\x30\x05\x0c\xa6\x80\xc1\x14\x30\x98\x02\x06\x53\xc0\x60\x0a\x18\x4c\x01\x83\x29\x60\x30\x05\x0c\xa6\x80\xc1\x14\x30\x98\x02\xc6\x58\x2f\x1c\x6e\xbd\x76\xa4\xd7\x26\x7e\xde\xc0\x3c\xcf\xb8\xef\x7f\x8f\x34\xae\xd3\xbf\x96\x98\xaf\x1f\x31\xf2\x2a\x99\xba\x04\x00\x00\xff\xff\x36\x79\x5a\xcd\x50\x26\x00\x00")

func bindataRoofBinBytes() ([]byte, error) {
	return bindataRead(
		_bindataRoofBin,
		"bindata/roof.bin",
	)
}

func bindataRoofBin() (*asset, error) {
	bytes, err := bindataRoofBinBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata/roof.bin", size: 9808, mode: os.FileMode(436), modTime: time.Unix(1526584463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata/athletics.bin": bindataAthleticsBin,
	"bindata/firstfloor.bin": bindataFirstfloorBin,
	"bindata/groundfloor.bin": bindataGroundfloorBin,
	"bindata/roof.bin": bindataRoofBin,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata": &bintree{nil, map[string]*bintree{
		"athletics.bin": &bintree{bindataAthleticsBin, map[string]*bintree{}},
		"firstfloor.bin": &bintree{bindataFirstfloorBin, map[string]*bintree{}},
		"groundfloor.bin": &bintree{bindataGroundfloorBin, map[string]*bintree{}},
		"roof.bin": &bintree{bindataRoofBin, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

